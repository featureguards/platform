// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: feature_toggle.proto

package feature_toggle

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeatureToggle_Type int32

const (
	FeatureToggle_ON_OFF     FeatureToggle_Type = 0
	FeatureToggle_PERCENTAGE FeatureToggle_Type = 1
	// Fail if can't confirm. Must be used by server-side code only.
	FeatureToggle_PERMISSION FeatureToggle_Type = 2
	// MultiVariant.
	FeatureToggle_EXPERIMENT FeatureToggle_Type = 3
)

// Enum value maps for FeatureToggle_Type.
var (
	FeatureToggle_Type_name = map[int32]string{
		0: "ON_OFF",
		1: "PERCENTAGE",
		2: "PERMISSION",
		3: "EXPERIMENT",
	}
	FeatureToggle_Type_value = map[string]int32{
		"ON_OFF":     0,
		"PERCENTAGE": 1,
		"PERMISSION": 2,
		"EXPERIMENT": 3,
	}
)

func (x FeatureToggle_Type) Enum() *FeatureToggle_Type {
	p := new(FeatureToggle_Type)
	*p = x
	return p
}

func (x FeatureToggle_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureToggle_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[0].Descriptor()
}

func (FeatureToggle_Type) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[0]
}

func (x FeatureToggle_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureToggle_Type.Descriptor instead.
func (FeatureToggle_Type) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{1, 0}
}

type Match_KeyType int32

const (
	Match_STRING  Match_KeyType = 0
	Match_BOOLEAN Match_KeyType = 1
	Match_FLOAT   Match_KeyType = 2
)

// Enum value maps for Match_KeyType.
var (
	Match_KeyType_name = map[int32]string{
		0: "STRING",
		1: "BOOLEAN",
		2: "FLOAT",
	}
	Match_KeyType_value = map[string]int32{
		"STRING":  0,
		"BOOLEAN": 1,
		"FLOAT":   2,
	}
)

func (x Match_KeyType) Enum() *Match_KeyType {
	p := new(Match_KeyType)
	*p = x
	return p
}

func (x Match_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Match_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[1].Descriptor()
}

func (Match_KeyType) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[1]
}

func (x Match_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Match_KeyType.Descriptor instead.
func (Match_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{3, 0}
}

type FeatureToggleHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*FeatureToggle `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *FeatureToggleHistory) Reset() {
	*x = FeatureToggleHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureToggleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureToggleHistory) ProtoMessage() {}

func (x *FeatureToggleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureToggleHistory.ProtoReflect.Descriptor instead.
func (*FeatureToggleHistory) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureToggleHistory) GetHistory() []*FeatureToggle {
	if x != nil {
		return x.History
	}
	return nil
}

type FeatureToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Read-only
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ToggleType  FeatureToggle_Type `protobuf:"varint,3,opt,name=toggle_type,json=toggleType,proto3,enum=feature_toggle.FeatureToggle_Type" json:"toggle_type,omitempty"` // Set once.
	Version     string             `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                                                                 // Read-only.
	Enabled     bool               `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Description string             `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Types that are assignable to FeatureDefinition:
	//	*FeatureToggle_OnOff
	//	*FeatureToggle_Percentage
	//	*FeatureToggle_Permission
	//	*FeatureToggle_Experiment
	FeatureDefinition isFeatureToggle_FeatureDefinition `protobuf_oneof:"FeatureDefinition"`
}

func (x *FeatureToggle) Reset() {
	*x = FeatureToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureToggle) ProtoMessage() {}

func (x *FeatureToggle) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureToggle.ProtoReflect.Descriptor instead.
func (*FeatureToggle) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{1}
}

func (x *FeatureToggle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureToggle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureToggle) GetToggleType() FeatureToggle_Type {
	if x != nil {
		return x.ToggleType
	}
	return FeatureToggle_ON_OFF
}

func (x *FeatureToggle) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FeatureToggle) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FeatureToggle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (m *FeatureToggle) GetFeatureDefinition() isFeatureToggle_FeatureDefinition {
	if m != nil {
		return m.FeatureDefinition
	}
	return nil
}

func (x *FeatureToggle) GetOnOff() *OnOffFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_OnOff); ok {
		return x.OnOff
	}
	return nil
}

func (x *FeatureToggle) GetPercentage() *PercentageFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Percentage); ok {
		return x.Percentage
	}
	return nil
}

func (x *FeatureToggle) GetPermission() *PermissionFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Permission); ok {
		return x.Permission
	}
	return nil
}

func (x *FeatureToggle) GetExperiment() *ExperimentFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Experiment); ok {
		return x.Experiment
	}
	return nil
}

type isFeatureToggle_FeatureDefinition interface {
	isFeatureToggle_FeatureDefinition()
}

type FeatureToggle_OnOff struct {
	OnOff *OnOffFeature `protobuf:"bytes,10,opt,name=on_off,json=onOff,proto3,oneof"`
}

type FeatureToggle_Percentage struct {
	Percentage *PercentageFeature `protobuf:"bytes,11,opt,name=percentage,proto3,oneof"`
}

type FeatureToggle_Permission struct {
	Permission *PermissionFeature `protobuf:"bytes,12,opt,name=permission,proto3,oneof"`
}

type FeatureToggle_Experiment struct {
	Experiment *ExperimentFeature `protobuf:"bytes,13,opt,name=experiment,proto3,oneof"`
}

func (*FeatureToggle_OnOff) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Percentage) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Permission) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Experiment) isFeatureToggle_FeatureDefinition() {}

type FeatureContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers map[string]*FeatureContext_ContextValue `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeatureContext) Reset() {
	*x = FeatureContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureContext) ProtoMessage() {}

func (x *FeatureContext) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureContext.ProtoReflect.Descriptor instead.
func (*FeatureContext) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureContext) GetMatchers() map[string]*FeatureContext_ContextValue {
	if x != nil {
		return x.Matchers
	}
	return nil
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key          string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyType      Match_KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=feature_toggle.Match_KeyType" json:"key_type,omitempty"`
	StringValues []string      `protobuf:"bytes,10,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	BoolValues   []bool        `protobuf:"varint,11,rep,packed,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{3}
}

func (x *Match) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Match) GetKeyType() Match_KeyType {
	if x != nil {
		return x.KeyType
	}
	return Match_STRING
}

func (x *Match) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *Match) GetBoolValues() []bool {
	if x != nil {
		return x.BoolValues
	}
	return nil
}

type Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Weight  float32  `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Variant) Reset() {
	*x = Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{4}
}

func (x *Variant) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *Variant) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type OnOffFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On  *Variant `protobuf:"bytes,1,opt,name=on,proto3" json:"on,omitempty"`
	Off *Variant `protobuf:"bytes,2,opt,name=off,proto3" json:"off,omitempty"`
}

func (x *OnOffFeature) Reset() {
	*x = OnOffFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOffFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOffFeature) ProtoMessage() {}

func (x *OnOffFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOffFeature.ProtoReflect.Descriptor instead.
func (*OnOffFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{5}
}

func (x *OnOffFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *OnOffFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

type PercentageFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt string   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	On   *Variant `protobuf:"bytes,2,opt,name=on,proto3" json:"on,omitempty"`
	Off  *Variant `protobuf:"bytes,3,opt,name=off,proto3" json:"off,omitempty"`
}

func (x *PercentageFeature) Reset() {
	*x = PercentageFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentageFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentageFeature) ProtoMessage() {}

func (x *PercentageFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentageFeature.ProtoReflect.Descriptor instead.
func (*PercentageFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{6}
}

func (x *PercentageFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PercentageFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PercentageFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

type PermissionFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt string   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	On   *Variant `protobuf:"bytes,2,opt,name=on,proto3" json:"on,omitempty"`
	Off  *Variant `protobuf:"bytes,3,opt,name=off,proto3" json:"off,omitempty"`
}

func (x *PermissionFeature) Reset() {
	*x = PermissionFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionFeature) ProtoMessage() {}

func (x *PermissionFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionFeature.ProtoReflect.Descriptor instead.
func (*PermissionFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{7}
}

func (x *PermissionFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PermissionFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PermissionFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

type ExperimentFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt     string     `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Variants []*Variant `protobuf:"bytes,2,rep,name=variants,proto3" json:"variants,omitempty"`
}

func (x *ExperimentFeature) Reset() {
	*x = ExperimentFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentFeature) ProtoMessage() {}

func (x *ExperimentFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentFeature.ProtoReflect.Descriptor instead.
func (*ExperimentFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{8}
}

func (x *ExperimentFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ExperimentFeature) GetVariants() []*Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type FeatureContext_ContextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType Match_KeyType `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=feature_toggle.Match_KeyType" json:"key_type,omitempty"`
	// Types that are assignable to Value:
	//	*FeatureContext_ContextValue_StringValue
	//	*FeatureContext_ContextValue_BoolValue
	Value isFeatureContext_ContextValue_Value `protobuf_oneof:"Value"`
}

func (x *FeatureContext_ContextValue) Reset() {
	*x = FeatureContext_ContextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureContext_ContextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureContext_ContextValue) ProtoMessage() {}

func (x *FeatureContext_ContextValue) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureContext_ContextValue.ProtoReflect.Descriptor instead.
func (*FeatureContext_ContextValue) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{2, 0}
}

func (x *FeatureContext_ContextValue) GetKeyType() Match_KeyType {
	if x != nil {
		return x.KeyType
	}
	return Match_STRING
}

func (m *FeatureContext_ContextValue) GetValue() isFeatureContext_ContextValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FeatureContext_ContextValue) GetStringValue() string {
	if x, ok := x.GetValue().(*FeatureContext_ContextValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *FeatureContext_ContextValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*FeatureContext_ContextValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isFeatureContext_ContextValue_Value interface {
	isFeatureContext_ContextValue_Value()
}

type FeatureContext_ContextValue_StringValue struct {
	StringValue string `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type FeatureContext_ContextValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,11,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

func (*FeatureContext_ContextValue_StringValue) isFeatureContext_ContextValue_Value() {}

func (*FeatureContext_ContextValue_BoolValue) isFeatureContext_ContextValue_Value() {}

var File_feature_toggle_proto protoreflect.FileDescriptor

var file_feature_toggle_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x22, 0x4f, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37,
	0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xad, 0x04, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0b, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f,
	0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x12,
	0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x42,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x03, 0x42, 0x13, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x73, 0x1a, 0x97, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4b,
	0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x68,
	0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8, 0x01, 0x0a, 0x05, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41,
	0x54, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x4f, 0x6e, 0x4f, 0x66, 0x66,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x02, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x22, 0x7b, 0x0a, 0x11, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x03, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x22, 0x7b, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x6f, 0x66,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x03, 0x6f, 0x66, 0x66, 0x22, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x33,
	0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x73, 0x42, 0x21, 0x5a, 0x1f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x76, 0x32, 0x2f, 0x67,
	0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feature_toggle_proto_rawDescOnce sync.Once
	file_feature_toggle_proto_rawDescData = file_feature_toggle_proto_rawDesc
)

func file_feature_toggle_proto_rawDescGZIP() []byte {
	file_feature_toggle_proto_rawDescOnce.Do(func() {
		file_feature_toggle_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_toggle_proto_rawDescData)
	})
	return file_feature_toggle_proto_rawDescData
}

var file_feature_toggle_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_feature_toggle_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_feature_toggle_proto_goTypes = []interface{}{
	(FeatureToggle_Type)(0),             // 0: feature_toggle.FeatureToggle.Type
	(Match_KeyType)(0),                  // 1: feature_toggle.Match.KeyType
	(*FeatureToggleHistory)(nil),        // 2: feature_toggle.FeatureToggleHistory
	(*FeatureToggle)(nil),               // 3: feature_toggle.FeatureToggle
	(*FeatureContext)(nil),              // 4: feature_toggle.FeatureContext
	(*Match)(nil),                       // 5: feature_toggle.Match
	(*Variant)(nil),                     // 6: feature_toggle.Variant
	(*OnOffFeature)(nil),                // 7: feature_toggle.OnOffFeature
	(*PercentageFeature)(nil),           // 8: feature_toggle.PercentageFeature
	(*PermissionFeature)(nil),           // 9: feature_toggle.PermissionFeature
	(*ExperimentFeature)(nil),           // 10: feature_toggle.ExperimentFeature
	(*FeatureContext_ContextValue)(nil), // 11: feature_toggle.FeatureContext.ContextValue
	nil,                                 // 12: feature_toggle.FeatureContext.MatchersEntry
}
var file_feature_toggle_proto_depIdxs = []int32{
	3,  // 0: feature_toggle.FeatureToggleHistory.history:type_name -> feature_toggle.FeatureToggle
	0,  // 1: feature_toggle.FeatureToggle.toggle_type:type_name -> feature_toggle.FeatureToggle.Type
	7,  // 2: feature_toggle.FeatureToggle.on_off:type_name -> feature_toggle.OnOffFeature
	8,  // 3: feature_toggle.FeatureToggle.percentage:type_name -> feature_toggle.PercentageFeature
	9,  // 4: feature_toggle.FeatureToggle.permission:type_name -> feature_toggle.PermissionFeature
	10, // 5: feature_toggle.FeatureToggle.experiment:type_name -> feature_toggle.ExperimentFeature
	12, // 6: feature_toggle.FeatureContext.matchers:type_name -> feature_toggle.FeatureContext.MatchersEntry
	1,  // 7: feature_toggle.Match.key_type:type_name -> feature_toggle.Match.KeyType
	5,  // 8: feature_toggle.Variant.matches:type_name -> feature_toggle.Match
	6,  // 9: feature_toggle.OnOffFeature.on:type_name -> feature_toggle.Variant
	6,  // 10: feature_toggle.OnOffFeature.off:type_name -> feature_toggle.Variant
	6,  // 11: feature_toggle.PercentageFeature.on:type_name -> feature_toggle.Variant
	6,  // 12: feature_toggle.PercentageFeature.off:type_name -> feature_toggle.Variant
	6,  // 13: feature_toggle.PermissionFeature.on:type_name -> feature_toggle.Variant
	6,  // 14: feature_toggle.PermissionFeature.off:type_name -> feature_toggle.Variant
	6,  // 15: feature_toggle.ExperimentFeature.variants:type_name -> feature_toggle.Variant
	1,  // 16: feature_toggle.FeatureContext.ContextValue.key_type:type_name -> feature_toggle.Match.KeyType
	11, // 17: feature_toggle.FeatureContext.MatchersEntry.value:type_name -> feature_toggle.FeatureContext.ContextValue
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_feature_toggle_proto_init() }
func file_feature_toggle_proto_init() {
	if File_feature_toggle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_toggle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureToggleHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOffFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentageFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureContext_ContextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feature_toggle_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*FeatureToggle_OnOff)(nil),
		(*FeatureToggle_Percentage)(nil),
		(*FeatureToggle_Permission)(nil),
		(*FeatureToggle_Experiment)(nil),
	}
	file_feature_toggle_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*FeatureContext_ContextValue_StringValue)(nil),
		(*FeatureContext_ContextValue_BoolValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_toggle_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_toggle_proto_goTypes,
		DependencyIndexes: file_feature_toggle_proto_depIdxs,
		EnumInfos:         file_feature_toggle_proto_enumTypes,
		MessageInfos:      file_feature_toggle_proto_msgTypes,
	}.Build()
	File_feature_toggle_proto = out.File
	file_feature_toggle_proto_rawDesc = nil
	file_feature_toggle_proto_goTypes = nil
	file_feature_toggle_proto_depIdxs = nil
}
