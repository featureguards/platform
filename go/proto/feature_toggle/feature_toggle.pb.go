// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: feature_toggle.proto

package feature_toggle

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	user "stackv2/go/proto/user"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform_Type int32

const (
	Platform_DEFAULT Platform_Type = 0
	Platform_WEB     Platform_Type = 1
	Platform_MOBILE  Platform_Type = 2
)

// Enum value maps for Platform_Type.
var (
	Platform_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "WEB",
		2: "MOBILE",
	}
	Platform_Type_value = map[string]int32{
		"DEFAULT": 0,
		"WEB":     1,
		"MOBILE":  2,
	}
)

func (x Platform_Type) Enum() *Platform_Type {
	p := new(Platform_Type)
	*p = x
	return p
}

func (x Platform_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[0].Descriptor()
}

func (Platform_Type) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[0]
}

func (x Platform_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform_Type.Descriptor instead.
func (Platform_Type) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{1, 0}
}

type FeatureToggle_Type int32

const (
	FeatureToggle_ON_OFF     FeatureToggle_Type = 0
	FeatureToggle_PERCENTAGE FeatureToggle_Type = 1
	// Fail if can't confirm. Must be used by server-side code only.
	FeatureToggle_PERMISSION FeatureToggle_Type = 2
	// MultiVariant.
	FeatureToggle_EXPERIMENT FeatureToggle_Type = 3
)

// Enum value maps for FeatureToggle_Type.
var (
	FeatureToggle_Type_name = map[int32]string{
		0: "ON_OFF",
		1: "PERCENTAGE",
		2: "PERMISSION",
		3: "EXPERIMENT",
	}
	FeatureToggle_Type_value = map[string]int32{
		"ON_OFF":     0,
		"PERCENTAGE": 1,
		"PERMISSION": 2,
		"EXPERIMENT": 3,
	}
)

func (x FeatureToggle_Type) Enum() *FeatureToggle_Type {
	p := new(FeatureToggle_Type)
	*p = x
	return p
}

func (x FeatureToggle_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeatureToggle_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[1].Descriptor()
}

func (FeatureToggle_Type) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[1]
}

func (x FeatureToggle_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeatureToggle_Type.Descriptor instead.
func (FeatureToggle_Type) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{2, 0}
}

type StringOp_Operator int32

const (
	StringOp_EQ       StringOp_Operator = 0
	StringOp_CONTAINS StringOp_Operator = 1
	StringOp_IN       StringOp_Operator = 2 // TODO: Regex
)

// Enum value maps for StringOp_Operator.
var (
	StringOp_Operator_name = map[int32]string{
		0: "EQ",
		1: "CONTAINS",
		2: "IN",
	}
	StringOp_Operator_value = map[string]int32{
		"EQ":       0,
		"CONTAINS": 1,
		"IN":       2,
	}
)

func (x StringOp_Operator) Enum() *StringOp_Operator {
	p := new(StringOp_Operator)
	*p = x
	return p
}

func (x StringOp_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StringOp_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[2].Descriptor()
}

func (StringOp_Operator) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[2]
}

func (x StringOp_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StringOp_Operator.Descriptor instead.
func (StringOp_Operator) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{4, 0}
}

type FloatOp_Operator int32

const (
	FloatOp_EQ  FloatOp_Operator = 0
	FloatOp_GT  FloatOp_Operator = 1
	FloatOp_LT  FloatOp_Operator = 2
	FloatOp_GTE FloatOp_Operator = 3
	FloatOp_LTE FloatOp_Operator = 4
	FloatOp_NEQ FloatOp_Operator = 5
	FloatOp_IN  FloatOp_Operator = 6
)

// Enum value maps for FloatOp_Operator.
var (
	FloatOp_Operator_name = map[int32]string{
		0: "EQ",
		1: "GT",
		2: "LT",
		3: "GTE",
		4: "LTE",
		5: "NEQ",
		6: "IN",
	}
	FloatOp_Operator_value = map[string]int32{
		"EQ":  0,
		"GT":  1,
		"LT":  2,
		"GTE": 3,
		"LTE": 4,
		"NEQ": 5,
		"IN":  6,
	}
)

func (x FloatOp_Operator) Enum() *FloatOp_Operator {
	p := new(FloatOp_Operator)
	*p = x
	return p
}

func (x FloatOp_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FloatOp_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[3].Descriptor()
}

func (FloatOp_Operator) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[3]
}

func (x FloatOp_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FloatOp_Operator.Descriptor instead.
func (FloatOp_Operator) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{6, 0}
}

type DateTimeOp_Operator int32

const (
	DateTimeOp_BEFORE DateTimeOp_Operator = 0
	DateTimeOp_AFTER  DateTimeOp_Operator = 1
)

// Enum value maps for DateTimeOp_Operator.
var (
	DateTimeOp_Operator_name = map[int32]string{
		0: "BEFORE",
		1: "AFTER",
	}
	DateTimeOp_Operator_value = map[string]int32{
		"BEFORE": 0,
		"AFTER":  1,
	}
)

func (x DateTimeOp_Operator) Enum() *DateTimeOp_Operator {
	p := new(DateTimeOp_Operator)
	*p = x
	return p
}

func (x DateTimeOp_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTimeOp_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[4].Descriptor()
}

func (DateTimeOp_Operator) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[4]
}

func (x DateTimeOp_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTimeOp_Operator.Descriptor instead.
func (DateTimeOp_Operator) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{7, 0}
}

type Key_Type int32

const (
	Key_STRING    Key_Type = 0
	Key_BOOLEAN   Key_Type = 1
	Key_FLOAT     Key_Type = 2
	Key_DATE_TIME Key_Type = 3
)

// Enum value maps for Key_Type.
var (
	Key_Type_name = map[int32]string{
		0: "STRING",
		1: "BOOLEAN",
		2: "FLOAT",
		3: "DATE_TIME",
	}
	Key_Type_value = map[string]int32{
		"STRING":    0,
		"BOOLEAN":   1,
		"FLOAT":     2,
		"DATE_TIME": 3,
	}
)

func (x Key_Type) Enum() *Key_Type {
	p := new(Key_Type)
	*p = x
	return p
}

func (x Key_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Key_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[5].Descriptor()
}

func (Key_Type) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[5]
}

func (x Key_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Key_Type.Descriptor instead.
func (Key_Type) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{8, 0}
}

type Stickiness_Type int32

const (
	Stickiness_RANDOM Stickiness_Type = 0
	Stickiness_KEYS   Stickiness_Type = 1
)

// Enum value maps for Stickiness_Type.
var (
	Stickiness_Type_name = map[int32]string{
		0: "RANDOM",
		1: "KEYS",
	}
	Stickiness_Type_value = map[string]int32{
		"RANDOM": 0,
		"KEYS":   1,
	}
)

func (x Stickiness_Type) Enum() *Stickiness_Type {
	p := new(Stickiness_Type)
	*p = x
	return p
}

func (x Stickiness_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stickiness_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_feature_toggle_proto_enumTypes[6].Descriptor()
}

func (Stickiness_Type) Type() protoreflect.EnumType {
	return &file_feature_toggle_proto_enumTypes[6]
}

func (x Stickiness_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stickiness_Type.Descriptor instead.
func (Stickiness_Type) EnumDescriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{12, 0}
}

type FeatureToggleHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History []*FeatureToggle `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
}

func (x *FeatureToggleHistory) Reset() {
	*x = FeatureToggleHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureToggleHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureToggleHistory) ProtoMessage() {}

func (x *FeatureToggleHistory) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureToggleHistory.ProtoReflect.Descriptor instead.
func (*FeatureToggleHistory) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{0}
}

func (x *FeatureToggleHistory) GetHistory() []*FeatureToggle {
	if x != nil {
		return x.History
	}
	return nil
}

type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{1}
}

type FeatureToggle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // Read-only
	Name        string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ToggleType  FeatureToggle_Type   `protobuf:"varint,3,opt,name=toggle_type,json=toggleType,proto3,enum=feature_toggle.FeatureToggle_Type" json:"toggle_type,omitempty"` // Set once.
	Version     int64                `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                                                // Read-only.
	Enabled     bool                 `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Description string               `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Platforms   []Platform_Type      `protobuf:"varint,7,rep,packed,name=platforms,proto3,enum=feature_toggle.Platform_Type" json:"platforms,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *timestamp.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ProjectId   string               `protobuf:"bytes,10,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreatedBy   *user.User           `protobuf:"bytes,11,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy   *user.User           `protobuf:"bytes,12,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// Types that are assignable to FeatureDefinition:
	//	*FeatureToggle_OnOff
	//	*FeatureToggle_Percentage
	//	*FeatureToggle_Permission
	//	*FeatureToggle_Experiment
	FeatureDefinition isFeatureToggle_FeatureDefinition `protobuf_oneof:"FeatureDefinition"`
}

func (x *FeatureToggle) Reset() {
	*x = FeatureToggle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureToggle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureToggle) ProtoMessage() {}

func (x *FeatureToggle) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureToggle.ProtoReflect.Descriptor instead.
func (*FeatureToggle) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{2}
}

func (x *FeatureToggle) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FeatureToggle) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FeatureToggle) GetToggleType() FeatureToggle_Type {
	if x != nil {
		return x.ToggleType
	}
	return FeatureToggle_ON_OFF
}

func (x *FeatureToggle) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *FeatureToggle) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *FeatureToggle) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeatureToggle) GetPlatforms() []Platform_Type {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *FeatureToggle) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FeatureToggle) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FeatureToggle) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *FeatureToggle) GetCreatedBy() *user.User {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *FeatureToggle) GetUpdatedBy() *user.User {
	if x != nil {
		return x.UpdatedBy
	}
	return nil
}

func (m *FeatureToggle) GetFeatureDefinition() isFeatureToggle_FeatureDefinition {
	if m != nil {
		return m.FeatureDefinition
	}
	return nil
}

func (x *FeatureToggle) GetOnOff() *OnOffFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_OnOff); ok {
		return x.OnOff
	}
	return nil
}

func (x *FeatureToggle) GetPercentage() *PercentageFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Percentage); ok {
		return x.Percentage
	}
	return nil
}

func (x *FeatureToggle) GetPermission() *PermissionFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Permission); ok {
		return x.Permission
	}
	return nil
}

func (x *FeatureToggle) GetExperiment() *ExperimentFeature {
	if x, ok := x.GetFeatureDefinition().(*FeatureToggle_Experiment); ok {
		return x.Experiment
	}
	return nil
}

type isFeatureToggle_FeatureDefinition interface {
	isFeatureToggle_FeatureDefinition()
}

type FeatureToggle_OnOff struct {
	OnOff *OnOffFeature `protobuf:"bytes,20,opt,name=on_off,json=onOff,proto3,oneof"`
}

type FeatureToggle_Percentage struct {
	Percentage *PercentageFeature `protobuf:"bytes,21,opt,name=percentage,proto3,oneof"`
}

type FeatureToggle_Permission struct {
	Permission *PermissionFeature `protobuf:"bytes,22,opt,name=permission,proto3,oneof"`
}

type FeatureToggle_Experiment struct {
	Experiment *ExperimentFeature `protobuf:"bytes,23,opt,name=experiment,proto3,oneof"`
}

func (*FeatureToggle_OnOff) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Percentage) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Permission) isFeatureToggle_FeatureDefinition() {}

func (*FeatureToggle_Experiment) isFeatureToggle_FeatureDefinition() {}

type FeatureContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matchers map[string]*FeatureContext_ContextValue `protobuf:"bytes,1,rep,name=matchers,proto3" json:"matchers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FeatureContext) Reset() {
	*x = FeatureContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureContext) ProtoMessage() {}

func (x *FeatureContext) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureContext.ProtoReflect.Descriptor instead.
func (*FeatureContext) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{3}
}

func (x *FeatureContext) GetMatchers() map[string]*FeatureContext_ContextValue {
	if x != nil {
		return x.Matchers
	}
	return nil
}

type StringOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     StringOp_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=feature_toggle.StringOp_Operator" json:"op,omitempty"`
	Values []string          `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringOp) Reset() {
	*x = StringOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringOp) ProtoMessage() {}

func (x *StringOp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringOp.ProtoReflect.Descriptor instead.
func (*StringOp) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{4}
}

func (x *StringOp) GetOp() StringOp_Operator {
	if x != nil {
		return x.Op
	}
	return StringOp_EQ
}

func (x *StringOp) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type BoolOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolOp) Reset() {
	*x = BoolOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolOp) ProtoMessage() {}

func (x *BoolOp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolOp.ProtoReflect.Descriptor instead.
func (*BoolOp) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{5}
}

func (x *BoolOp) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type FloatOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op     FloatOp_Operator `protobuf:"varint,1,opt,name=op,proto3,enum=feature_toggle.FloatOp_Operator" json:"op,omitempty"`
	Values []float32        `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *FloatOp) Reset() {
	*x = FloatOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatOp) ProtoMessage() {}

func (x *FloatOp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatOp.ProtoReflect.Descriptor instead.
func (*FloatOp) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{6}
}

func (x *FloatOp) GetOp() FloatOp_Operator {
	if x != nil {
		return x.Op
	}
	return FloatOp_EQ
}

func (x *FloatOp) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

type DateTimeOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op        DateTimeOp_Operator  `protobuf:"varint,1,opt,name=op,proto3,enum=feature_toggle.DateTimeOp_Operator" json:"op,omitempty"`
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *DateTimeOp) Reset() {
	*x = DateTimeOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeOp) ProtoMessage() {}

func (x *DateTimeOp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeOp.ProtoReflect.Descriptor instead.
func (*DateTimeOp) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{7}
}

func (x *DateTimeOp) GetOp() DateTimeOp_Operator {
	if x != nil {
		return x.Op
	}
	return DateTimeOp_BEFORE
}

func (x *DateTimeOp) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KeyType Key_Type `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=feature_toggle.Key_Type" json:"key_type,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{8}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Key) GetKeyType() Key_Type {
	if x != nil {
		return x.KeyType
	}
	return Key_STRING
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *Key `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Operation:
	//	*Match_StringOp
	//	*Match_BoolOp
	//	*Match_FloatOp
	//	*Match_DateTimeOp
	Operation isMatch_Operation `protobuf_oneof:"Operation"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{9}
}

func (x *Match) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (m *Match) GetOperation() isMatch_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *Match) GetStringOp() *StringOp {
	if x, ok := x.GetOperation().(*Match_StringOp); ok {
		return x.StringOp
	}
	return nil
}

func (x *Match) GetBoolOp() *BoolOp {
	if x, ok := x.GetOperation().(*Match_BoolOp); ok {
		return x.BoolOp
	}
	return nil
}

func (x *Match) GetFloatOp() *FloatOp {
	if x, ok := x.GetOperation().(*Match_FloatOp); ok {
		return x.FloatOp
	}
	return nil
}

func (x *Match) GetDateTimeOp() *DateTimeOp {
	if x, ok := x.GetOperation().(*Match_DateTimeOp); ok {
		return x.DateTimeOp
	}
	return nil
}

type isMatch_Operation interface {
	isMatch_Operation()
}

type Match_StringOp struct {
	StringOp *StringOp `protobuf:"bytes,10,opt,name=string_op,json=stringOp,proto3,oneof"`
}

type Match_BoolOp struct {
	BoolOp *BoolOp `protobuf:"bytes,11,opt,name=bool_op,json=boolOp,proto3,oneof"`
}

type Match_FloatOp struct {
	FloatOp *FloatOp `protobuf:"bytes,12,opt,name=float_op,json=floatOp,proto3,oneof"`
}

type Match_DateTimeOp struct {
	DateTimeOp *DateTimeOp `protobuf:"bytes,13,opt,name=date_time_op,json=dateTimeOp,proto3,oneof"`
}

func (*Match_StringOp) isMatch_Operation() {}

func (*Match_BoolOp) isMatch_Operation() {}

func (*Match_FloatOp) isMatch_Operation() {}

func (*Match_DateTimeOp) isMatch_Operation() {}

type Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*Match `protobuf:"bytes,1,rep,name=matches,proto3" json:"matches,omitempty"`
	Weight  float32  `protobuf:"fixed32,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *Variant) Reset() {
	*x = Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variant) ProtoMessage() {}

func (x *Variant) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variant.ProtoReflect.Descriptor instead.
func (*Variant) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{10}
}

func (x *Variant) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *Variant) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type OnOffFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On  *Variant `protobuf:"bytes,1,opt,name=on,proto3" json:"on,omitempty"`
	Off *Variant `protobuf:"bytes,2,opt,name=off,proto3" json:"off,omitempty"`
}

func (x *OnOffFeature) Reset() {
	*x = OnOffFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnOffFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnOffFeature) ProtoMessage() {}

func (x *OnOffFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnOffFeature.ProtoReflect.Descriptor instead.
func (*OnOffFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{11}
}

func (x *OnOffFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *OnOffFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

type Stickiness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StickinessType Stickiness_Type `protobuf:"varint,1,opt,name=stickiness_type,json=stickinessType,proto3,enum=feature_toggle.Stickiness_Type" json:"stickiness_type,omitempty"`
	Keys           []*Key          `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *Stickiness) Reset() {
	*x = Stickiness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stickiness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stickiness) ProtoMessage() {}

func (x *Stickiness) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stickiness.ProtoReflect.Descriptor instead.
func (*Stickiness) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{12}
}

func (x *Stickiness) GetStickinessType() Stickiness_Type {
	if x != nil {
		return x.StickinessType
	}
	return Stickiness_RANDOM
}

func (x *Stickiness) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PercentageFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt       string      `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	On         *Variant    `protobuf:"bytes,2,opt,name=on,proto3" json:"on,omitempty"`
	Off        *Variant    `protobuf:"bytes,3,opt,name=off,proto3" json:"off,omitempty"`
	Stickiness *Stickiness `protobuf:"bytes,4,opt,name=stickiness,proto3" json:"stickiness,omitempty"`
}

func (x *PercentageFeature) Reset() {
	*x = PercentageFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PercentageFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PercentageFeature) ProtoMessage() {}

func (x *PercentageFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PercentageFeature.ProtoReflect.Descriptor instead.
func (*PercentageFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{13}
}

func (x *PercentageFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PercentageFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PercentageFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

func (x *PercentageFeature) GetStickiness() *Stickiness {
	if x != nil {
		return x.Stickiness
	}
	return nil
}

type PermissionFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt string   `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	On   *Variant `protobuf:"bytes,2,opt,name=on,proto3" json:"on,omitempty"`
	Off  *Variant `protobuf:"bytes,3,opt,name=off,proto3" json:"off,omitempty"`
}

func (x *PermissionFeature) Reset() {
	*x = PermissionFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionFeature) ProtoMessage() {}

func (x *PermissionFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionFeature.ProtoReflect.Descriptor instead.
func (*PermissionFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{14}
}

func (x *PermissionFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *PermissionFeature) GetOn() *Variant {
	if x != nil {
		return x.On
	}
	return nil
}

func (x *PermissionFeature) GetOff() *Variant {
	if x != nil {
		return x.Off
	}
	return nil
}

type ExperimentFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Salt     string     `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	Variants []*Variant `protobuf:"bytes,2,rep,name=variants,proto3" json:"variants,omitempty"`
}

func (x *ExperimentFeature) Reset() {
	*x = ExperimentFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentFeature) ProtoMessage() {}

func (x *ExperimentFeature) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentFeature.ProtoReflect.Descriptor instead.
func (*ExperimentFeature) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{15}
}

func (x *ExperimentFeature) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *ExperimentFeature) GetVariants() []*Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type FeatureContext_ContextValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType Key_Type `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3,enum=feature_toggle.Key_Type" json:"key_type,omitempty"`
	// Types that are assignable to Value:
	//	*FeatureContext_ContextValue_StringValue
	//	*FeatureContext_ContextValue_BoolValue
	Value isFeatureContext_ContextValue_Value `protobuf_oneof:"Value"`
}

func (x *FeatureContext_ContextValue) Reset() {
	*x = FeatureContext_ContextValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_toggle_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureContext_ContextValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureContext_ContextValue) ProtoMessage() {}

func (x *FeatureContext_ContextValue) ProtoReflect() protoreflect.Message {
	mi := &file_feature_toggle_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureContext_ContextValue.ProtoReflect.Descriptor instead.
func (*FeatureContext_ContextValue) Descriptor() ([]byte, []int) {
	return file_feature_toggle_proto_rawDescGZIP(), []int{3, 0}
}

func (x *FeatureContext_ContextValue) GetKeyType() Key_Type {
	if x != nil {
		return x.KeyType
	}
	return Key_STRING
}

func (m *FeatureContext_ContextValue) GetValue() isFeatureContext_ContextValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *FeatureContext_ContextValue) GetStringValue() string {
	if x, ok := x.GetValue().(*FeatureContext_ContextValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *FeatureContext_ContextValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*FeatureContext_ContextValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

type isFeatureContext_ContextValue_Value interface {
	isFeatureContext_ContextValue_Value()
}

type FeatureContext_ContextValue_StringValue struct {
	StringValue string `protobuf:"bytes,10,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type FeatureContext_ContextValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,11,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

func (*FeatureContext_ContextValue_StringValue) isFeatureContext_ContextValue_Value() {}

func (*FeatureContext_ContextValue_BoolValue) isFeatureContext_ContextValue_Value() {}

var File_feature_toggle_proto protoreflect.FileDescriptor

var file_feature_toggle_proto_rawDesc = []byte{
	0x0a, 0x14, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x14, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0x34, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x22, 0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x42, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xd5, 0x06, 0x0a, 0x0d, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x0b, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x29, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x6f, 0x6e, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x42, 0x13, 0x0a,
	0x11, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73, 0x1a,
	0x92, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x68, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7f,
	0x0a, 0x08, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x12, 0x31, 0x0a, 0x02, 0x6f, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e,
	0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x02, 0x22,
	0x1e, 0x0a, 0x06, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x12, 0x30, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x51, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x22, 0x9e, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x12, 0x33, 0x0a, 0x02, 0x6f,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x70, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x02, 0x6f, 0x70,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x21, 0x0a, 0x08, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x01, 0x22, 0x87, 0x01,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x9d, 0x02, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x25, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f,
	0x70, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67,
	0x67, 0x6c, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f,
	0x6f, 0x6c, 0x4f, 0x70, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6f, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x4f, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f,
	0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x4f,
	0x6e, 0x4f, 0x66, 0x66, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x02, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x52, 0x02, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x22,
	0x9d, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x48,
	0x0a, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x41, 0x4e,
	0x44, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x01, 0x22,
	0xb7, 0x01, 0x0a, 0x11, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x02,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x6f, 0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x6f,
	0x66, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x22, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12,
	0x33, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x42, 0x21, 0x5a, 0x1f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x76, 0x32, 0x2f,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_feature_toggle_proto_rawDescOnce sync.Once
	file_feature_toggle_proto_rawDescData = file_feature_toggle_proto_rawDesc
)

func file_feature_toggle_proto_rawDescGZIP() []byte {
	file_feature_toggle_proto_rawDescOnce.Do(func() {
		file_feature_toggle_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_toggle_proto_rawDescData)
	})
	return file_feature_toggle_proto_rawDescData
}

var file_feature_toggle_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_feature_toggle_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_feature_toggle_proto_goTypes = []interface{}{
	(Platform_Type)(0),                  // 0: feature_toggle.Platform.Type
	(FeatureToggle_Type)(0),             // 1: feature_toggle.FeatureToggle.Type
	(StringOp_Operator)(0),              // 2: feature_toggle.StringOp.Operator
	(FloatOp_Operator)(0),               // 3: feature_toggle.FloatOp.Operator
	(DateTimeOp_Operator)(0),            // 4: feature_toggle.DateTimeOp.Operator
	(Key_Type)(0),                       // 5: feature_toggle.Key.Type
	(Stickiness_Type)(0),                // 6: feature_toggle.Stickiness.Type
	(*FeatureToggleHistory)(nil),        // 7: feature_toggle.FeatureToggleHistory
	(*Platform)(nil),                    // 8: feature_toggle.Platform
	(*FeatureToggle)(nil),               // 9: feature_toggle.FeatureToggle
	(*FeatureContext)(nil),              // 10: feature_toggle.FeatureContext
	(*StringOp)(nil),                    // 11: feature_toggle.StringOp
	(*BoolOp)(nil),                      // 12: feature_toggle.BoolOp
	(*FloatOp)(nil),                     // 13: feature_toggle.FloatOp
	(*DateTimeOp)(nil),                  // 14: feature_toggle.DateTimeOp
	(*Key)(nil),                         // 15: feature_toggle.Key
	(*Match)(nil),                       // 16: feature_toggle.Match
	(*Variant)(nil),                     // 17: feature_toggle.Variant
	(*OnOffFeature)(nil),                // 18: feature_toggle.OnOffFeature
	(*Stickiness)(nil),                  // 19: feature_toggle.Stickiness
	(*PercentageFeature)(nil),           // 20: feature_toggle.PercentageFeature
	(*PermissionFeature)(nil),           // 21: feature_toggle.PermissionFeature
	(*ExperimentFeature)(nil),           // 22: feature_toggle.ExperimentFeature
	(*FeatureContext_ContextValue)(nil), // 23: feature_toggle.FeatureContext.ContextValue
	nil,                                 // 24: feature_toggle.FeatureContext.MatchersEntry
	(*timestamp.Timestamp)(nil),         // 25: google.protobuf.Timestamp
	(*user.User)(nil),                   // 26: user.User
}
var file_feature_toggle_proto_depIdxs = []int32{
	9,  // 0: feature_toggle.FeatureToggleHistory.history:type_name -> feature_toggle.FeatureToggle
	1,  // 1: feature_toggle.FeatureToggle.toggle_type:type_name -> feature_toggle.FeatureToggle.Type
	0,  // 2: feature_toggle.FeatureToggle.platforms:type_name -> feature_toggle.Platform.Type
	25, // 3: feature_toggle.FeatureToggle.created_at:type_name -> google.protobuf.Timestamp
	25, // 4: feature_toggle.FeatureToggle.updated_at:type_name -> google.protobuf.Timestamp
	26, // 5: feature_toggle.FeatureToggle.created_by:type_name -> user.User
	26, // 6: feature_toggle.FeatureToggle.updated_by:type_name -> user.User
	18, // 7: feature_toggle.FeatureToggle.on_off:type_name -> feature_toggle.OnOffFeature
	20, // 8: feature_toggle.FeatureToggle.percentage:type_name -> feature_toggle.PercentageFeature
	21, // 9: feature_toggle.FeatureToggle.permission:type_name -> feature_toggle.PermissionFeature
	22, // 10: feature_toggle.FeatureToggle.experiment:type_name -> feature_toggle.ExperimentFeature
	24, // 11: feature_toggle.FeatureContext.matchers:type_name -> feature_toggle.FeatureContext.MatchersEntry
	2,  // 12: feature_toggle.StringOp.op:type_name -> feature_toggle.StringOp.Operator
	3,  // 13: feature_toggle.FloatOp.op:type_name -> feature_toggle.FloatOp.Operator
	4,  // 14: feature_toggle.DateTimeOp.op:type_name -> feature_toggle.DateTimeOp.Operator
	25, // 15: feature_toggle.DateTimeOp.timestamp:type_name -> google.protobuf.Timestamp
	5,  // 16: feature_toggle.Key.key_type:type_name -> feature_toggle.Key.Type
	15, // 17: feature_toggle.Match.key:type_name -> feature_toggle.Key
	11, // 18: feature_toggle.Match.string_op:type_name -> feature_toggle.StringOp
	12, // 19: feature_toggle.Match.bool_op:type_name -> feature_toggle.BoolOp
	13, // 20: feature_toggle.Match.float_op:type_name -> feature_toggle.FloatOp
	14, // 21: feature_toggle.Match.date_time_op:type_name -> feature_toggle.DateTimeOp
	16, // 22: feature_toggle.Variant.matches:type_name -> feature_toggle.Match
	17, // 23: feature_toggle.OnOffFeature.on:type_name -> feature_toggle.Variant
	17, // 24: feature_toggle.OnOffFeature.off:type_name -> feature_toggle.Variant
	6,  // 25: feature_toggle.Stickiness.stickiness_type:type_name -> feature_toggle.Stickiness.Type
	15, // 26: feature_toggle.Stickiness.keys:type_name -> feature_toggle.Key
	17, // 27: feature_toggle.PercentageFeature.on:type_name -> feature_toggle.Variant
	17, // 28: feature_toggle.PercentageFeature.off:type_name -> feature_toggle.Variant
	19, // 29: feature_toggle.PercentageFeature.stickiness:type_name -> feature_toggle.Stickiness
	17, // 30: feature_toggle.PermissionFeature.on:type_name -> feature_toggle.Variant
	17, // 31: feature_toggle.PermissionFeature.off:type_name -> feature_toggle.Variant
	17, // 32: feature_toggle.ExperimentFeature.variants:type_name -> feature_toggle.Variant
	5,  // 33: feature_toggle.FeatureContext.ContextValue.key_type:type_name -> feature_toggle.Key.Type
	23, // 34: feature_toggle.FeatureContext.MatchersEntry.value:type_name -> feature_toggle.FeatureContext.ContextValue
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_feature_toggle_proto_init() }
func file_feature_toggle_proto_init() {
	if File_feature_toggle_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_toggle_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureToggleHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureToggle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnOffFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stickiness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PercentageFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_toggle_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureContext_ContextValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feature_toggle_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*FeatureToggle_OnOff)(nil),
		(*FeatureToggle_Percentage)(nil),
		(*FeatureToggle_Permission)(nil),
		(*FeatureToggle_Experiment)(nil),
	}
	file_feature_toggle_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Match_StringOp)(nil),
		(*Match_BoolOp)(nil),
		(*Match_FloatOp)(nil),
		(*Match_DateTimeOp)(nil),
	}
	file_feature_toggle_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FeatureContext_ContextValue_StringValue)(nil),
		(*FeatureContext_ContextValue_BoolValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_toggle_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_feature_toggle_proto_goTypes,
		DependencyIndexes: file_feature_toggle_proto_depIdxs,
		EnumInfos:         file_feature_toggle_proto_enumTypes,
		MessageInfos:      file_feature_toggle_proto_msgTypes,
	}.Build()
	File_feature_toggle_proto = out.File
	file_feature_toggle_proto_rawDesc = nil
	file_feature_toggle_proto_goTypes = nil
	file_feature_toggle_proto_depIdxs = nil
}
