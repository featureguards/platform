/* tslint:disable */
/* eslint-disable */
/**
 * Dashboard API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ApiKey
 */
export interface ApiKey {
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  environmentId?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ApiKey
   */
  expiresAt?: string;
}
/**
 *
 * @export
 * @interface ApiKeys
 */
export interface ApiKeys {
  /**
   *
   * @type {Array<ApiKey>}
   * @memberof ApiKeys
   */
  apiKeys?: Array<ApiKey>;
}
/**
 *
 * @export
 * @interface BoolOp
 */
export interface BoolOp {
  /**
   *
   * @type {boolean}
   * @memberof BoolOp
   */
  value?: boolean;
}
/**
 *
 * @export
 * @interface CloneEnvironmentRequestEnvironment
 */
export interface CloneEnvironmentRequestEnvironment {
  /**
   *
   * @type {string}
   * @memberof CloneEnvironmentRequestEnvironment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CloneEnvironmentRequestEnvironment
   */
  description?: string;
}
/**
 *
 * @export
 * @interface CreateApiKeyRequest
 */
export interface CreateApiKeyRequest {
  /**
   *
   * @type {string}
   * @memberof CreateApiKeyRequest
   */
  environmentId?: string;
  /**
   *
   * @type {string}
   * @memberof CreateApiKeyRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateApiKeyRequest
   */
  expiresAt?: string;
}
/**
 *
 * @export
 * @interface CreateEnvironmentRequest
 */
export interface CreateEnvironmentRequest {
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  description?: string;
}
/**
 *
 * @export
 * @interface CreateFeatureToggleRequest
 */
export interface CreateFeatureToggleRequest {
  /**
   *
   * @type {string}
   * @memberof CreateFeatureToggleRequest
   */
  projectId?: string;
  /**
   *
   * @type {FeatureToggle}
   * @memberof CreateFeatureToggleRequest
   */
  feature?: FeatureToggle;
}
/**
 *
 * @export
 * @interface CreateProjectInviteRequestInvite
 */
export interface CreateProjectInviteRequestInvite {
  /**
   *
   * @type {string}
   * @memberof CreateProjectInviteRequestInvite
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectInviteRequestInvite
   */
  firstName?: string;
}
/**
 *
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequest
   */
  description?: string;
  /**
   *
   * @type {Array<CreateProjectRequestNewEnvironment>}
   * @memberof CreateProjectRequest
   */
  environments?: Array<CreateProjectRequestNewEnvironment>;
}
/**
 *
 * @export
 * @interface CreateProjectRequestNewEnvironment
 */
export interface CreateProjectRequestNewEnvironment {
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequestNewEnvironment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequestNewEnvironment
   */
  description?: string;
}
/**
 *
 * @export
 * @interface DateTimeOp
 */
export interface DateTimeOp {
  /**
   *
   * @type {number}
   * @memberof DateTimeOp
   */
  op?: number;
  /**
   *
   * @type {string}
   * @memberof DateTimeOp
   */
  timestamp?: string;
}
/**
 *
 * @export
 * @interface Environment
 */
export interface Environment {
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  projectId?: string;
}
/**
 *
 * @export
 * @interface EnvironmentFeatureToggle
 */
export interface EnvironmentFeatureToggle {
  /**
   *
   * @type {string}
   * @memberof EnvironmentFeatureToggle
   */
  environmentId?: string;
  /**
   *
   * @type {FeatureToggle}
   * @memberof EnvironmentFeatureToggle
   */
  featureToggle?: FeatureToggle;
}
/**
 *
 * @export
 * @interface EnvironmentFeatureToggles
 */
export interface EnvironmentFeatureToggles {
  /**
   *
   * @type {Array<EnvironmentFeatureToggle>}
   * @memberof EnvironmentFeatureToggles
   */
  featureToggles?: Array<EnvironmentFeatureToggle>;
}
/**
 *
 * @export
 * @interface ExperimentFeature
 */
export interface ExperimentFeature {
  /**
   *
   * @type {string}
   * @memberof ExperimentFeature
   */
  salt?: string;
  /**
   *
   * @type {Array<Variant>}
   * @memberof ExperimentFeature
   */
  variants?: Array<Variant>;
}
/**
 *
 * @export
 * @interface FeatureToggle
 */
export interface FeatureToggle {
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof FeatureToggle
   */
  toggleType?: number;
  /**
   *
   * @type {number}
   * @memberof FeatureToggle
   */
  version?: number;
  /**
   *
   * @type {boolean}
   * @memberof FeatureToggle
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  description?: string;
  /**
   *
   * @type {Array<number>}
   * @memberof FeatureToggle
   */
  platforms?: Array<number>;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  projectId?: string;
  /**
   *
   * @type {User}
   * @memberof FeatureToggle
   */
  createdBy?: User;
  /**
   *
   * @type {User}
   * @memberof FeatureToggle
   */
  updatedBy?: User;
  /**
   *
   * @type {OnOffFeature}
   * @memberof FeatureToggle
   */
  onOff?: OnOffFeature;
  /**
   *
   * @type {PercentageFeature}
   * @memberof FeatureToggle
   */
  percentage?: PercentageFeature;
  /**
   *
   * @type {PermissionFeature}
   * @memberof FeatureToggle
   */
  permission?: PermissionFeature;
  /**
   *
   * @type {ExperimentFeature}
   * @memberof FeatureToggle
   */
  experiment?: ExperimentFeature;
}
/**
 *
 * @export
 * @interface FeatureToggleHistory
 */
export interface FeatureToggleHistory {
  /**
   *
   * @type {Array<FeatureToggle>}
   * @memberof FeatureToggleHistory
   */
  history?: Array<FeatureToggle>;
}
/**
 *
 * @export
 * @interface FloatOp
 */
export interface FloatOp {
  /**
   *
   * @type {number}
   * @memberof FloatOp
   */
  op?: number;
  /**
   *
   * @type {Array<number>}
   * @memberof FloatOp
   */
  values?: Array<number>;
}
/**
 *
 * @export
 * @interface Key
 */
export interface Key {
  /**
   *
   * @type {string}
   * @memberof Key
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof Key
   */
  keyType?: number;
}
/**
 *
 * @export
 * @interface ListEnvironmentsResponse
 */
export interface ListEnvironmentsResponse {
  /**
   *
   * @type {Array<Environment>}
   * @memberof ListEnvironmentsResponse
   */
  environments?: Array<Environment>;
}
/**
 *
 * @export
 * @interface ListFeatureToggleResponse
 */
export interface ListFeatureToggleResponse {
  /**
   *
   * @type {Array<FeatureToggle>}
   * @memberof ListFeatureToggleResponse
   */
  featureToggles?: Array<FeatureToggle>;
}
/**
 *
 * @export
 * @interface ListProjectsResponse
 */
export interface ListProjectsResponse {
  /**
   *
   * @type {Array<Project>}
   * @memberof ListProjectsResponse
   */
  projects?: Array<Project>;
}
/**
 *
 * @export
 * @interface Match
 */
export interface Match {
  /**
   *
   * @type {Key}
   * @memberof Match
   */
  key?: Key;
  /**
   *
   * @type {StringOp}
   * @memberof Match
   */
  stringOp?: StringOp;
  /**
   *
   * @type {BoolOp}
   * @memberof Match
   */
  boolOp?: BoolOp;
  /**
   *
   * @type {FloatOp}
   * @memberof Match
   */
  floatOp?: FloatOp;
  /**
   *
   * @type {DateTimeOp}
   * @memberof Match
   */
  dateTimeOp?: DateTimeOp;
}
/**
 *
 * @export
 * @interface OnOffFeature
 */
export interface OnOffFeature {
  /**
   *
   * @type {Variant}
   * @memberof OnOffFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof OnOffFeature
   */
  off?: Variant;
}
/**
 *
 * @export
 * @interface PercentageFeature
 */
export interface PercentageFeature {
  /**
   *
   * @type {string}
   * @memberof PercentageFeature
   */
  salt?: string;
  /**
   *
   * @type {Variant}
   * @memberof PercentageFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof PercentageFeature
   */
  off?: Variant;
  /**
   *
   * @type {Stickiness}
   * @memberof PercentageFeature
   */
  stickiness?: Stickiness;
}
/**
 *
 * @export
 * @interface PermissionFeature
 */
export interface PermissionFeature {
  /**
   *
   * @type {string}
   * @memberof PermissionFeature
   */
  salt?: string;
  /**
   *
   * @type {Variant}
   * @memberof PermissionFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof PermissionFeature
   */
  off?: Variant;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
  /**
   *
   * @type {string}
   * @memberof Project
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Project
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Project
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Project
   */
  createdAt?: string;
  /**
   *
   * @type {Array<Environment>}
   * @memberof Project
   */
  environments?: Array<Environment>;
}
/**
 *
 * @export
 * @interface ProjectInvite
 */
export interface ProjectInvite {
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  projectName?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  expiresAt?: string;
  /**
   *
   * @type {number}
   * @memberof ProjectInvite
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof ProjectInvite
   */
  firstName?: string;
}
/**
 *
 * @export
 * @interface ProjectInvites
 */
export interface ProjectInvites {
  /**
   *
   * @type {Array<ProjectInvite>}
   * @memberof ProjectInvites
   */
  invites?: Array<ProjectInvite>;
}
/**
 *
 * @export
 * @interface ProjectMember
 */
export interface ProjectMember {
  /**
   *
   * @type {string}
   * @memberof ProjectMember
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ProjectMember
   */
  projectId?: string;
  /**
   *
   * @type {number}
   * @memberof ProjectMember
   */
  role?: number;
  /**
   *
   * @type {User}
   * @memberof ProjectMember
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof ProjectMember
   */
  createdAt?: string;
}
/**
 *
 * @export
 * @interface ProjectMembers
 */
export interface ProjectMembers {
  /**
   *
   * @type {Array<ProjectMember>}
   * @memberof ProjectMembers
   */
  members?: Array<ProjectMember>;
}
/**
 *
 * @export
 * @interface Stickiness
 */
export interface Stickiness {
  /**
   *
   * @type {number}
   * @memberof Stickiness
   */
  stickinessType?: number;
  /**
   *
   * @type {Array<Key>}
   * @memberof Stickiness
   */
  keys?: Array<Key>;
}
/**
 *
 * @export
 * @interface StringOp
 */
export interface StringOp {
  /**
   *
   * @type {number}
   * @memberof StringOp
   */
  op?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof StringOp
   */
  values?: Array<string>;
}
/**
 *
 * @export
 * @interface UpdateFeatureToggleRequest
 */
export interface UpdateFeatureToggleRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateFeatureToggleRequest
   */
  id?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateFeatureToggleRequest
   */
  environmentIds?: Array<string>;
  /**
   *
   * @type {FeatureToggle}
   * @memberof UpdateFeatureToggleRequest
   */
  feature?: FeatureToggle;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  oryId?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {Array<UserVerifiableAddress>}
   * @memberof User
   */
  addresses?: Array<UserVerifiableAddress>;
  /**
   *
   * @type {Array<UserVerifiableAddress>}
   * @memberof User
   */
  recoveryAddresses?: Array<UserVerifiableAddress>;
  /**
   *
   * @type {string}
   * @memberof User
   */
  domain?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile?: string;
}
/**
 *
 * @export
 * @interface UserVerifiableAddress
 */
export interface UserVerifiableAddress {
  /**
   *
   * @type {string}
   * @memberof UserVerifiableAddress
   */
  address?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserVerifiableAddress
   */
  verified?: boolean;
}
/**
 *
 * @export
 * @interface Variant
 */
export interface Variant {
  /**
   *
   * @type {Array<Match>}
   * @memberof Variant
   */
  matches?: Array<Match>;
  /**
   *
   * @type {number}
   * @memberof Variant
   */
  weight?: number;
}

/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} id
     * @param {CloneEnvironmentRequestEnvironment} cloneEnvironmentRequestEnvironment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneEnvironment: async (
      id: string,
      cloneEnvironmentRequestEnvironment: CloneEnvironmentRequestEnvironment,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('cloneEnvironment', 'id', id);
      // verify required parameter 'cloneEnvironmentRequestEnvironment' is not null or undefined
      assertParamExists(
        'cloneEnvironment',
        'cloneEnvironmentRequestEnvironment',
        cloneEnvironmentRequestEnvironment
      );
      const localVarPath = `/api/v1/environments/{id}/clone`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        cloneEnvironmentRequestEnvironment,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {CreateApiKeyRequest} createApiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey: async (
      createApiKeyRequest: CreateApiKeyRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createApiKeyRequest' is not null or undefined
      assertParamExists('createApiKey', 'createApiKeyRequest', createApiKeyRequest);
      const localVarPath = `/api/v1/apiKeys`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createApiKeyRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Environments
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment: async (
      createEnvironmentRequest: CreateEnvironmentRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createEnvironmentRequest' is not null or undefined
      assertParamExists('createEnvironment', 'createEnvironmentRequest', createEnvironmentRequest);
      const localVarPath = `/api/v1/environments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEnvironmentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * FeatureToggles
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeatureToggle: async (
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createFeatureToggleRequest' is not null or undefined
      assertParamExists(
        'createFeatureToggle',
        'createFeatureToggleRequest',
        createFeatureToggleRequest
      );
      const localVarPath = `/api/v1/featureToggles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFeatureToggleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: async (
      createProjectRequest: CreateProjectRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createProjectRequest' is not null or undefined
      assertParamExists('createProject', 'createProjectRequest', createProjectRequest);
      const localVarPath = `/api/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProjectRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Invites
     * @param {string} projectId
     * @param {CreateProjectInviteRequestInvite} createProjectInviteRequestInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectInvite: async (
      projectId: string,
      createProjectInviteRequestInvite: CreateProjectInviteRequestInvite,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('createProjectInvite', 'projectId', projectId);
      // verify required parameter 'createProjectInviteRequestInvite' is not null or undefined
      assertParamExists(
        'createProjectInvite',
        'createProjectInviteRequestInvite',
        createProjectInviteRequestInvite
      );
      const localVarPath = `/api/v1/projects/{projectId}/invites`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProjectInviteRequestInvite,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteApiKey', 'id', id);
      const localVarPath = `/api/v1/apiKeys/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteEnvironment', 'id', id);
      const localVarPath = `/api/v1/environments/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureToggle: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteFeatureToggle', 'id', id);
      const localVarPath = `/api/v1/featureToggles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProject', 'id', id);
      const localVarPath = `/api/v1/projects/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectMember: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProjectMember', 'id', id);
      const localVarPath = `/api/v1/project_members/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getEnvironment', 'id', id);
      const localVarPath = `/api/v1/environments/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [environmentIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggle: async (
      id: string,
      environmentIds?: Array<string>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getFeatureToggle', 'id', id);
      const localVarPath = `/api/v1/featureToggles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (environmentIds) {
        localVarQueryParameter['environmentIds'] = environmentIds;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggleHistoryForEnvironment: async (
      id: string,
      environmentId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getFeatureToggleHistoryForEnvironment', 'id', id);
      const localVarPath = `/api/v1/featureToggles/{id}/history`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (environmentId !== undefined) {
        localVarQueryParameter['environmentId'] = environmentId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getProject', 'id', id);
      const localVarPath = `/api/v1/projects/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectInvite: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getProjectInvite', 'id', id);
      const localVarPath = `/api/v1/invites/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Users
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('getUser', 'userId', userId);
      const localVarPath = `/api/v1/users/{userId}`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys: async (
      environmentId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/apiKeys`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (environmentId !== undefined) {
        localVarQueryParameter['environmentId'] = environmentId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} [projectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments: async (
      projectId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/environments`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (projectId !== undefined) {
        localVarQueryParameter['projectId'] = projectId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeatureToggles: async (
      environmentId?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/featureToggles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (environmentId !== undefined) {
        localVarQueryParameter['environmentId'] = environmentId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectInvites: async (
      projectId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('listProjectInvites', 'projectId', projectId);
      const localVarPath = `/api/v1/projects/{projectId}/invites`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectMembers: async (
      projectId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('listProjectMembers', 'projectId', projectId);
      const localVarPath = `/api/v1/projects/{projectId}/members`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserInvites: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('listUserInvites', 'userId', userId);
      const localVarPath = `/api/v1/users/{userId}/invites`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatureToggle: async (
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateFeatureToggle', 'id', id);
      // verify required parameter 'updateFeatureToggleRequest' is not null or undefined
      assertParamExists(
        'updateFeatureToggle',
        'updateFeatureToggleRequest',
        updateFeatureToggleRequest
      );
      const localVarPath = `/api/v1/featureToggles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFeatureToggleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {ProjectInvite} projectInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectInvite: async (
      id: string,
      projectInvite: ProjectInvite,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateProjectInvite', 'id', id);
      // verify required parameter 'projectInvite' is not null or undefined
      assertParamExists('updateProjectInvite', 'projectInvite', projectInvite);
      const localVarPath = `/api/v1/invites/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        projectInvite,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {CloneEnvironmentRequestEnvironment} cloneEnvironmentRequestEnvironment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cloneEnvironment(
      id: string,
      cloneEnvironmentRequestEnvironment: CloneEnvironmentRequestEnvironment,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cloneEnvironment(
        id,
        cloneEnvironmentRequestEnvironment,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {CreateApiKeyRequest} createApiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createApiKey(
      createApiKeyRequest: CreateApiKeyRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createApiKey(
        createApiKeyRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Environments
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEnvironment(
      createEnvironmentRequest: CreateEnvironmentRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(
        createEnvironmentRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * FeatureToggles
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFeatureToggle(
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFeatureToggle(
        createFeatureToggleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProject(
      createProjectRequest: CreateProjectRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(
        createProjectRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Invites
     * @param {string} projectId
     * @param {CreateProjectInviteRequestInvite} createProjectInviteRequestInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProjectInvite(
      projectId: string,
      createProjectInviteRequestInvite: CreateProjectInviteRequestInvite,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectInvite(
        projectId,
        createProjectInviteRequestInvite,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteApiKey(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApiKey(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEnvironment(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFeatureToggle(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureToggle(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProject(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProjectMember(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectMember(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnvironment(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [environmentIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeatureToggle(
      id: string,
      environmentIds?: Array<string>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentFeatureToggles>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureToggle(
        id,
        environmentIds,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeatureToggleHistoryForEnvironment(
      id: string,
      environmentId?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggleHistory>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFeatureToggleHistoryForEnvironment(
          id,
          environmentId,
          options
        );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProject(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectInvite(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInvite>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectInvite(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Users
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listApiKeys(
      environmentId?: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKeys>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listApiKeys(environmentId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [projectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEnvironments(
      projectId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEnvironmentsResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(
        projectId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFeatureToggles(
      environmentId?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFeatureToggleResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listFeatureToggles(
        environmentId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProjectInvites(
      projectId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInvites>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectInvites(
        projectId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProjectMembers(
      projectId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectMembers>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listProjectMembers(
        projectId,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProjects(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUserInvites(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInvites>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUserInvites(userId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFeatureToggle(
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeatureToggle(
        id,
        updateFeatureToggleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {ProjectInvite} projectInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProjectInvite(
      id: string,
      projectInvite: ProjectInvite,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInvite>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectInvite(
        id,
        projectInvite,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DashboardApiFp(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {CloneEnvironmentRequestEnvironment} cloneEnvironmentRequestEnvironment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cloneEnvironment(
      id: string,
      cloneEnvironmentRequestEnvironment: CloneEnvironmentRequestEnvironment,
      options?: any
    ): AxiosPromise<Environment> {
      return localVarFp
        .cloneEnvironment(id, cloneEnvironmentRequestEnvironment, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateApiKeyRequest} createApiKeyRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: any): AxiosPromise<void> {
      return localVarFp
        .createApiKey(createApiKeyRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Environments
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(
      createEnvironmentRequest: CreateEnvironmentRequest,
      options?: any
    ): AxiosPromise<Environment> {
      return localVarFp
        .createEnvironment(createEnvironmentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * FeatureToggles
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeatureToggle(
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .createFeatureToggle(createFeatureToggleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(
      createProjectRequest: CreateProjectRequest,
      options?: any
    ): AxiosPromise<Project> {
      return localVarFp
        .createProject(createProjectRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Invites
     * @param {string} projectId
     * @param {CreateProjectInviteRequestInvite} createProjectInviteRequestInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProjectInvite(
      projectId: string,
      createProjectInviteRequestInvite: CreateProjectInviteRequestInvite,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .createProjectInvite(projectId, createProjectInviteRequestInvite, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteApiKey(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteApiKey(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteEnvironment(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureToggle(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteFeatureToggle(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteProject(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProjectMember(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .deleteProjectMember(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(id: string, options?: any): AxiosPromise<Environment> {
      return localVarFp.getEnvironment(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {Array<string>} [environmentIds]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggle(
      id: string,
      environmentIds?: Array<string>,
      options?: any
    ): AxiosPromise<EnvironmentFeatureToggles> {
      return localVarFp
        .getFeatureToggle(id, environmentIds, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggleHistoryForEnvironment(
      id: string,
      environmentId?: string,
      options?: any
    ): AxiosPromise<FeatureToggleHistory> {
      return localVarFp
        .getFeatureToggleHistoryForEnvironment(id, environmentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(id: string, options?: any): AxiosPromise<Project> {
      return localVarFp.getProject(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectInvite(id: string, options?: any): AxiosPromise<ProjectInvite> {
      return localVarFp.getProjectInvite(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Users
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp.getUser(userId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listApiKeys(environmentId?: string, options?: any): AxiosPromise<ApiKeys> {
      return localVarFp
        .listApiKeys(environmentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [projectId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments(projectId?: string, options?: any): AxiosPromise<ListEnvironmentsResponse> {
      return localVarFp
        .listEnvironments(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [environmentId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeatureToggles(
      environmentId?: string,
      options?: any
    ): AxiosPromise<ListFeatureToggleResponse> {
      return localVarFp
        .listFeatureToggles(environmentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectInvites(projectId: string, options?: any): AxiosPromise<ProjectInvites> {
      return localVarFp
        .listProjectInvites(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjectMembers(projectId: string, options?: any): AxiosPromise<ProjectMembers> {
      return localVarFp
        .listProjectMembers(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(options?: any): AxiosPromise<ListProjectsResponse> {
      return localVarFp.listProjects(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserInvites(userId: string, options?: any): AxiosPromise<ProjectInvites> {
      return localVarFp
        .listUserInvites(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatureToggle(
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options?: any
    ): AxiosPromise<void> {
      return localVarFp
        .updateFeatureToggle(id, updateFeatureToggleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {ProjectInvite} projectInvite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProjectInvite(
      id: string,
      projectInvite: ProjectInvite,
      options?: any
    ): AxiosPromise<ProjectInvite> {
      return localVarFp
        .updateProjectInvite(id, projectInvite, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
  /**
   *
   * @param {string} id
   * @param {CloneEnvironmentRequestEnvironment} cloneEnvironmentRequestEnvironment
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public cloneEnvironment(
    id: string,
    cloneEnvironmentRequestEnvironment: CloneEnvironmentRequestEnvironment,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .cloneEnvironment(id, cloneEnvironmentRequestEnvironment, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateApiKeyRequest} createApiKeyRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createApiKey(createApiKeyRequest: CreateApiKeyRequest, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .createApiKey(createApiKeyRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Environments
   * @param {CreateEnvironmentRequest} createEnvironmentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createEnvironment(
    createEnvironmentRequest: CreateEnvironmentRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .createEnvironment(createEnvironmentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * FeatureToggles
   * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createFeatureToggle(
    createFeatureToggleRequest: CreateFeatureToggleRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .createFeatureToggle(createFeatureToggleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Projects
   * @param {CreateProjectRequest} createProjectRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createProject(createProjectRequest: CreateProjectRequest, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .createProject(createProjectRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Invites
   * @param {string} projectId
   * @param {CreateProjectInviteRequestInvite} createProjectInviteRequestInvite
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createProjectInvite(
    projectId: string,
    createProjectInviteRequestInvite: CreateProjectInviteRequestInvite,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .createProjectInvite(projectId, createProjectInviteRequestInvite, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteApiKey(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteApiKey(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteEnvironment(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteEnvironment(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteFeatureToggle(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteFeatureToggle(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteProject(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteProjectMember(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteProjectMember(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getEnvironment(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getEnvironment(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {Array<string>} [environmentIds]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getFeatureToggle(
    id: string,
    environmentIds?: Array<string>,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .getFeatureToggle(id, environmentIds, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {string} [environmentId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getFeatureToggleHistoryForEnvironment(
    id: string,
    environmentId?: string,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .getFeatureToggleHistoryForEnvironment(id, environmentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getProject(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getProjectInvite(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getProjectInvite(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Users
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getUser(userId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getUser(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [environmentId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listApiKeys(environmentId?: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listApiKeys(environmentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [projectId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listEnvironments(projectId?: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listEnvironments(projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [environmentId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listFeatureToggles(environmentId?: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listFeatureToggles(environmentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listProjectInvites(projectId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listProjectInvites(projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listProjectMembers(projectId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listProjectMembers(projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listProjects(options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listProjects(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listUserInvites(userId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listUserInvites(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public updateFeatureToggle(
    id: string,
    updateFeatureToggleRequest: UpdateFeatureToggleRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .updateFeatureToggle(id, updateFeatureToggleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {ProjectInvite} projectInvite
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public updateProjectInvite(
    id: string,
    projectInvite: ProjectInvite,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .updateProjectInvite(id, projectInvite, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
