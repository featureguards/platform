/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GreetReply
 */
export interface GreetReply {
    /**
     * 
     * @type {string}
     * @memberof GreetReply
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HelloReply
 */
export interface HelloReply {
    /**
     * 
     * @type {string}
     * @memberof HelloReply
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface HelloRequestFrom
 */
export interface HelloRequestFrom {
    /**
     * 
     * @type {string}
     * @memberof HelloRequestFrom
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof HelloRequestFrom
     */
    'from'?: string;
}

/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalSayHello: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('globalSayHello', 'name', name)
            const localVarPath = `/v1/global/hello/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async globalSayHello(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GreetReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.globalSayHello(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GlobalApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        globalSayHello(name: string, options?: any): AxiosPromise<GreetReply> {
            return localVarFp.globalSayHello(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GlobalApi
     */
    public globalSayHello(name: string, options?: AxiosRequestConfig) {
        return GlobalApiFp(this.configuration).globalSayHello(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GreeterApi - axios parameter creator
 * @export
 */
export const GreeterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeterSayHello: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('greeterSayHello', 'name', name)
            const localVarPath = `/v1/greeter/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HelloRequestFrom} helloRequestFrom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeterSayHelloFrom: async (helloRequestFrom: HelloRequestFrom, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'helloRequestFrom' is not null or undefined
            assertParamExists('greeterSayHelloFrom', 'helloRequestFrom', helloRequestFrom)
            const localVarPath = `/v1/greeter`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(helloRequestFrom, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GreeterApi - functional programming interface
 * @export
 */
export const GreeterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GreeterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async greeterSayHello(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelloReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.greeterSayHello(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HelloRequestFrom} helloRequestFrom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async greeterSayHelloFrom(helloRequestFrom: HelloRequestFrom, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelloReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.greeterSayHelloFrom(helloRequestFrom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GreeterApi - factory interface
 * @export
 */
export const GreeterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GreeterApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeterSayHello(name: string, options?: any): AxiosPromise<HelloReply> {
            return localVarFp.greeterSayHello(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HelloRequestFrom} helloRequestFrom 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greeterSayHelloFrom(helloRequestFrom: HelloRequestFrom, options?: any): AxiosPromise<HelloReply> {
            return localVarFp.greeterSayHelloFrom(helloRequestFrom, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GreeterApi - object-oriented interface
 * @export
 * @class GreeterApi
 * @extends {BaseAPI}
 */
export class GreeterApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GreeterApi
     */
    public greeterSayHello(name: string, options?: AxiosRequestConfig) {
        return GreeterApiFp(this.configuration).greeterSayHello(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {HelloRequestFrom} helloRequestFrom 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GreeterApi
     */
    public greeterSayHelloFrom(helloRequestFrom: HelloRequestFrom, options?: AxiosRequestConfig) {
        return GreeterApiFp(this.configuration).greeterSayHelloFrom(helloRequestFrom, options).then((request) => request(this.axios, this.basePath));
    }
}


