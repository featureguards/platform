/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CreateEnvironmentRequest
 */
export interface CreateEnvironmentRequest {
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateEnvironmentRequest
   */
  description?: string;
}
/**
 *
 * @export
 * @interface CreateFeatureToggleRequest
 */
export interface CreateFeatureToggleRequest {
  /**
   *
   * @type {string}
   * @memberof CreateFeatureToggleRequest
   */
  projectId?: string;
  /**
   *
   * @type {FeatureToggle}
   * @memberof CreateFeatureToggleRequest
   */
  feature?: FeatureToggle;
}
/**
 *
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequest
   */
  description?: string;
  /**
   *
   * @type {Array<CreateProjectRequestNewEnvironment>}
   * @memberof CreateProjectRequest
   */
  environments?: Array<CreateProjectRequestNewEnvironment>;
}
/**
 *
 * @export
 * @interface CreateProjectRequestNewEnvironment
 */
export interface CreateProjectRequestNewEnvironment {
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequestNewEnvironment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof CreateProjectRequestNewEnvironment
   */
  description?: string;
}
/**
 *
 * @export
 * @interface Environment
 */
export interface Environment {
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Environment
   */
  description?: string;
}
/**
 *
 * @export
 * @interface ExperimentFeature
 */
export interface ExperimentFeature {
  /**
   *
   * @type {string}
   * @memberof ExperimentFeature
   */
  salt?: string;
  /**
   *
   * @type {Array<Variant>}
   * @memberof ExperimentFeature
   */
  variants?: Array<Variant>;
}
/**
 *
 * @export
 * @interface FeatureToggle
 */
export interface FeatureToggle {
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof FeatureToggle
   */
  toggleType?: number;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  version?: string;
  /**
   *
   * @type {boolean}
   * @memberof FeatureToggle
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof FeatureToggle
   */
  description?: string;
  /**
   *
   * @type {OnOffFeature}
   * @memberof FeatureToggle
   */
  onOff?: OnOffFeature;
  /**
   *
   * @type {PercentageFeature}
   * @memberof FeatureToggle
   */
  percentage?: PercentageFeature;
  /**
   *
   * @type {PermissionFeature}
   * @memberof FeatureToggle
   */
  permission?: PermissionFeature;
  /**
   *
   * @type {ExperimentFeature}
   * @memberof FeatureToggle
   */
  experiment?: ExperimentFeature;
}
/**
 *
 * @export
 * @interface FeatureToggleHistory
 */
export interface FeatureToggleHistory {
  /**
   *
   * @type {Array<FeatureToggle>}
   * @memberof FeatureToggleHistory
   */
  history?: Array<FeatureToggle>;
}
/**
 *
 * @export
 * @interface GreetReply
 */
export interface GreetReply {
  /**
   *
   * @type {string}
   * @memberof GreetReply
   */
  message?: string;
}
/**
 *
 * @export
 * @interface HelloReply
 */
export interface HelloReply {
  /**
   *
   * @type {string}
   * @memberof HelloReply
   */
  message?: string;
}
/**
 *
 * @export
 * @interface HelloRequestFrom
 */
export interface HelloRequestFrom {
  /**
   *
   * @type {string}
   * @memberof HelloRequestFrom
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof HelloRequestFrom
   */
  from?: string;
}
/**
 *
 * @export
 * @interface ListEnvironmentsResponse
 */
export interface ListEnvironmentsResponse {
  /**
   *
   * @type {Array<Environment>}
   * @memberof ListEnvironmentsResponse
   */
  environments?: Array<Environment>;
}
/**
 *
 * @export
 * @interface ListFeatureToggleResponse
 */
export interface ListFeatureToggleResponse {
  /**
   *
   * @type {Array<FeatureToggle>}
   * @memberof ListFeatureToggleResponse
   */
  features?: Array<FeatureToggle>;
}
/**
 *
 * @export
 * @interface ListProjectsResponse
 */
export interface ListProjectsResponse {
  /**
   *
   * @type {Array<Project>}
   * @memberof ListProjectsResponse
   */
  projects?: Array<Project>;
}
/**
 *
 * @export
 * @interface Match
 */
export interface Match {
  /**
   *
   * @type {string}
   * @memberof Match
   */
  key?: string;
  /**
   *
   * @type {number}
   * @memberof Match
   */
  keyType?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Match
   */
  stringValues?: Array<string>;
  /**
   *
   * @type {Array<boolean>}
   * @memberof Match
   */
  boolValues?: Array<boolean>;
}
/**
 *
 * @export
 * @interface OnOffFeature
 */
export interface OnOffFeature {
  /**
   *
   * @type {Variant}
   * @memberof OnOffFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof OnOffFeature
   */
  off?: Variant;
}
/**
 *
 * @export
 * @interface PercentageFeature
 */
export interface PercentageFeature {
  /**
   *
   * @type {string}
   * @memberof PercentageFeature
   */
  salt?: string;
  /**
   *
   * @type {Variant}
   * @memberof PercentageFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof PercentageFeature
   */
  off?: Variant;
}
/**
 *
 * @export
 * @interface PermissionFeature
 */
export interface PermissionFeature {
  /**
   *
   * @type {string}
   * @memberof PermissionFeature
   */
  salt?: string;
  /**
   *
   * @type {Variant}
   * @memberof PermissionFeature
   */
  on?: Variant;
  /**
   *
   * @type {Variant}
   * @memberof PermissionFeature
   */
  off?: Variant;
}
/**
 *
 * @export
 * @interface Project
 */
export interface Project {
  /**
   *
   * @type {string}
   * @memberof Project
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Project
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Project
   */
  description?: string;
  /**
   *
   * @type {Array<Environment>}
   * @memberof Project
   */
  environments?: Array<Environment>;
}
/**
 *
 * @export
 * @interface UpdateFeatureToggleRequest
 */
export interface UpdateFeatureToggleRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateFeatureToggleRequest
   */
  projectId?: string;
  /**
   *
   * @type {string}
   * @memberof UpdateFeatureToggleRequest
   */
  environmentId?: string;
  /**
   *
   * @type {FeatureToggle}
   * @memberof UpdateFeatureToggleRequest
   */
  feature?: FeatureToggle;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  oryId?: string;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  active?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  firstName?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lastName?: string;
  /**
   *
   * @type {Array<UserVerifiableAddress>}
   * @memberof User
   */
  addresses?: Array<UserVerifiableAddress>;
  /**
   *
   * @type {Array<UserVerifiableAddress>}
   * @memberof User
   */
  recoveryAddresses?: Array<UserVerifiableAddress>;
  /**
   *
   * @type {string}
   * @memberof User
   */
  domain?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile?: string;
}
/**
 *
 * @export
 * @interface UserVerifiableAddress
 */
export interface UserVerifiableAddress {
  /**
   *
   * @type {string}
   * @memberof UserVerifiableAddress
   */
  address?: string;
  /**
   *
   * @type {boolean}
   * @memberof UserVerifiableAddress
   */
  verified?: boolean;
}
/**
 *
 * @export
 * @interface Variant
 */
export interface Variant {
  /**
   *
   * @type {Array<Match>}
   * @memberof Variant
   */
  matches?: Array<Match>;
  /**
   *
   * @type {number}
   * @memberof Variant
   */
  weight?: number;
}

/**
 * DashboardApi - axios parameter creator
 * @export
 */
export const DashboardApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Environments
     * @param {string} projectId
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment: async (
      projectId: string,
      createEnvironmentRequest: CreateEnvironmentRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('createEnvironment', 'projectId', projectId);
      // verify required parameter 'createEnvironmentRequest' is not null or undefined
      assertParamExists('createEnvironment', 'createEnvironmentRequest', createEnvironmentRequest);
      const localVarPath = `/api/v1/projects/{projectId}/environments`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createEnvironmentRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * FeatureToggles
     * @param {string} projectId
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeatureToggle: async (
      projectId: string,
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('createFeatureToggle', 'projectId', projectId);
      // verify required parameter 'createFeatureToggleRequest' is not null or undefined
      assertParamExists('createFeatureToggle', 'createFeatureToggleRequest', createFeatureToggleRequest);
      const localVarPath = `/api/v1/projects/{projectId}/features`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createFeatureToggleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: async (
      createProjectRequest: CreateProjectRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createProjectRequest' is not null or undefined
      assertParamExists('createProject', 'createProjectRequest', createProjectRequest);
      const localVarPath = `/api/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment: async (
      projectId: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('deleteEnvironment', 'projectId', projectId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteEnvironment', 'id', id);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{id}`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureToggle: async (
      projectId: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('deleteFeatureToggle', 'projectId', projectId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteFeatureToggle', 'id', id);
      const localVarPath = `/api/v1/projects/{projectId}/features/{id}`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteProject', 'id', id);
      const localVarPath = `/api/v1/projects/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment: async (projectId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('getEnvironment', 'projectId', projectId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getEnvironment', 'id', id);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{id}`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggle: async (
      projectId: string,
      environmentId: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('getFeatureToggle', 'projectId', projectId);
      // verify required parameter 'environmentId' is not null or undefined
      assertParamExists('getFeatureToggle', 'environmentId', environmentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getFeatureToggle', 'id', id);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{environmentId}/features/{id}`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'environmentId'}}`, encodeURIComponent(String(environmentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggleHistory: async (
      projectId: string,
      environmentId: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('getFeatureToggleHistory', 'projectId', projectId);
      // verify required parameter 'environmentId' is not null or undefined
      assertParamExists('getFeatureToggleHistory', 'environmentId', environmentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getFeatureToggleHistory', 'id', id);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{environmentId}/features/{id}/history`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'environmentId'}}`, encodeURIComponent(String(environmentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getProject', 'id', id);
      const localVarPath = `/api/v1/projects/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('listEnvironments', 'projectId', projectId);
      const localVarPath = `/api/v1/projects/{projectId}/environments`.replace(
        `{${'projectId'}}`,
        encodeURIComponent(String(projectId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeatureToggles: async (
      projectId: string,
      environmentId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('listFeatureToggles', 'projectId', projectId);
      // verify required parameter 'environmentId' is not null or undefined
      assertParamExists('listFeatureToggles', 'environmentId', environmentId);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{environmentId}/features`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'environmentId'}}`, encodeURIComponent(String(environmentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     * User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatureToggle: async (
      projectId: string,
      environmentId: string,
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists('updateFeatureToggle', 'projectId', projectId);
      // verify required parameter 'environmentId' is not null or undefined
      assertParamExists('updateFeatureToggle', 'environmentId', environmentId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateFeatureToggle', 'id', id);
      // verify required parameter 'updateFeatureToggleRequest' is not null or undefined
      assertParamExists('updateFeatureToggle', 'updateFeatureToggleRequest', updateFeatureToggleRequest);
      const localVarPath = `/api/v1/projects/{projectId}/environments/{environmentId}/features/{id}`
        .replace(`{${'projectId'}}`, encodeURIComponent(String(projectId)))
        .replace(`{${'environmentId'}}`, encodeURIComponent(String(environmentId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateFeatureToggleRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * DashboardApi - functional programming interface
 * @export
 */
export const DashboardApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DashboardApiAxiosParamCreator(configuration);
  return {
    /**
     * Environments
     * @param {string} projectId
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createEnvironment(
      projectId: string,
      createEnvironmentRequest: CreateEnvironmentRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createEnvironment(
        projectId,
        createEnvironmentRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * FeatureToggles
     * @param {string} projectId
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFeatureToggle(
      projectId: string,
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFeatureToggle(
        projectId,
        createFeatureToggleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProject(
      createProjectRequest: CreateProjectRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteEnvironment(
      projectId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEnvironment(projectId, id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFeatureToggle(
      projectId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFeatureToggle(projectId, id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProject(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getEnvironment(
      projectId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getEnvironment(projectId, id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeatureToggle(
      projectId: string,
      environmentId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureToggle(projectId, environmentId, id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFeatureToggleHistory(
      projectId: string,
      environmentId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggleHistory>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureToggleHistory(
        projectId,
        environmentId,
        id,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProject(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProject(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listEnvironments(
      projectId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListEnvironmentsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listEnvironments(projectId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFeatureToggles(
      projectId: string,
      environmentId: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFeatureToggleResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listFeatureToggles(projectId, environmentId, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listProjects(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListProjectsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listProjects(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async me(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateFeatureToggle(
      projectId: string,
      environmentId: string,
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateFeatureToggle(
        projectId,
        environmentId,
        id,
        updateFeatureToggleRequest,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * DashboardApi - factory interface
 * @export
 */
export const DashboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DashboardApiFp(configuration);
  return {
    /**
     * Environments
     * @param {string} projectId
     * @param {CreateEnvironmentRequest} createEnvironmentRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createEnvironment(
      projectId: string,
      createEnvironmentRequest: CreateEnvironmentRequest,
      options?: any
    ): AxiosPromise<Environment> {
      return localVarFp
        .createEnvironment(projectId, createEnvironmentRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * FeatureToggles
     * @param {string} projectId
     * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFeatureToggle(
      projectId: string,
      createFeatureToggleRequest: CreateFeatureToggleRequest,
      options?: any
    ): AxiosPromise<FeatureToggle> {
      return localVarFp
        .createFeatureToggle(projectId, createFeatureToggleRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Projects
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(createProjectRequest: CreateProjectRequest, options?: any): AxiosPromise<Project> {
      return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteEnvironment(projectId: string, id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteEnvironment(projectId, id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFeatureToggle(projectId: string, id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteFeatureToggle(projectId, id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(id: string, options?: any): AxiosPromise<void> {
      return localVarFp.deleteProject(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEnvironment(projectId: string, id: string, options?: any): AxiosPromise<Environment> {
      return localVarFp.getEnvironment(projectId, id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggle(projectId: string, environmentId: string, id: string, options?: any): AxiosPromise<FeatureToggle> {
      return localVarFp
        .getFeatureToggle(projectId, environmentId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFeatureToggleHistory(
      projectId: string,
      environmentId: string,
      id: string,
      options?: any
    ): AxiosPromise<FeatureToggleHistory> {
      return localVarFp
        .getFeatureToggleHistory(projectId, environmentId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProject(id: string, options?: any): AxiosPromise<Project> {
      return localVarFp.getProject(id, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listEnvironments(projectId: string, options?: any): AxiosPromise<ListEnvironmentsResponse> {
      return localVarFp.listEnvironments(projectId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFeatureToggles(
      projectId: string,
      environmentId: string,
      options?: any
    ): AxiosPromise<ListFeatureToggleResponse> {
      return localVarFp
        .listFeatureToggles(projectId, environmentId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listProjects(options?: any): AxiosPromise<ListProjectsResponse> {
      return localVarFp.listProjects(options).then((request) => request(axios, basePath));
    },
    /**
     * User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: any): AxiosPromise<User> {
      return localVarFp.me(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId
     * @param {string} environmentId
     * @param {string} id
     * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateFeatureToggle(
      projectId: string,
      environmentId: string,
      id: string,
      updateFeatureToggleRequest: UpdateFeatureToggleRequest,
      options?: any
    ): AxiosPromise<FeatureToggle> {
      return localVarFp
        .updateFeatureToggle(projectId, environmentId, id, updateFeatureToggleRequest, options)
        .then((request) => request(axios, basePath));
    }
  };
};

/**
 * DashboardApi - object-oriented interface
 * @export
 * @class DashboardApi
 * @extends {BaseAPI}
 */
export class DashboardApi extends BaseAPI {
  /**
   * Environments
   * @param {string} projectId
   * @param {CreateEnvironmentRequest} createEnvironmentRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createEnvironment(
    projectId: string,
    createEnvironmentRequest: CreateEnvironmentRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .createEnvironment(projectId, createEnvironmentRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * FeatureToggles
   * @param {string} projectId
   * @param {CreateFeatureToggleRequest} createFeatureToggleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createFeatureToggle(
    projectId: string,
    createFeatureToggleRequest: CreateFeatureToggleRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .createFeatureToggle(projectId, createFeatureToggleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Projects
   * @param {CreateProjectRequest} createProjectRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public createProject(createProjectRequest: CreateProjectRequest, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .createProject(createProjectRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteEnvironment(projectId: string, id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteEnvironment(projectId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteFeatureToggle(projectId: string, id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteFeatureToggle(projectId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public deleteProject(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .deleteProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getEnvironment(projectId: string, id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getEnvironment(projectId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} environmentId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getFeatureToggle(projectId: string, environmentId: string, id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getFeatureToggle(projectId, environmentId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} environmentId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getFeatureToggleHistory(projectId: string, environmentId: string, id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getFeatureToggleHistory(projectId, environmentId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public getProject(id: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .getProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listEnvironments(projectId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listEnvironments(projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} environmentId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listFeatureToggles(projectId: string, environmentId: string, options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listFeatureToggles(projectId, environmentId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public listProjects(options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .listProjects(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * User
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public me(options?: AxiosRequestConfig) {
    return DashboardApiFp(this.configuration)
      .me(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId
   * @param {string} environmentId
   * @param {string} id
   * @param {UpdateFeatureToggleRequest} updateFeatureToggleRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DashboardApi
   */
  public updateFeatureToggle(
    projectId: string,
    environmentId: string,
    id: string,
    updateFeatureToggleRequest: UpdateFeatureToggleRequest,
    options?: AxiosRequestConfig
  ) {
    return DashboardApiFp(this.configuration)
      .updateFeatureToggle(projectId, environmentId, id, updateFeatureToggleRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GlobalApi - axios parameter creator
 * @export
 */
export const GlobalApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHello: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('sayHello', 'name', name);
      const localVarPath = `/v1/global/hello/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * GlobalApi - functional programming interface
 * @export
 */
export const GlobalApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GlobalApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sayHello(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GreetReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * GlobalApi - factory interface
 * @export
 */
export const GlobalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = GlobalApiFp(configuration);
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHello(name: string, options?: any): AxiosPromise<GreetReply> {
      return localVarFp.sayHello(name, options).then((request) => request(axios, basePath));
    }
  };
};

/**
 * GlobalApi - object-oriented interface
 * @export
 * @class GlobalApi
 * @extends {BaseAPI}
 */
export class GlobalApi extends BaseAPI {
  /**
   *
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GlobalApi
   */
  public sayHello(name: string, options?: AxiosRequestConfig) {
    return GlobalApiFp(this.configuration)
      .sayHello(name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * GreeterApi - axios parameter creator
 * @export
 */
export const GreeterApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHello: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('sayHello', 'name', name);
      const localVarPath = `/v1/greeter/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    },
    /**
     *
     * @param {HelloRequestFrom} helloRequestFrom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHelloFrom: async (
      helloRequestFrom: HelloRequestFrom,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'helloRequestFrom' is not null or undefined
      assertParamExists('sayHelloFrom', 'helloRequestFrom', helloRequestFrom);
      const localVarPath = `/v1/greeter`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(helloRequestFrom, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * GreeterApi - functional programming interface
 * @export
 */
export const GreeterApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GreeterApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sayHello(
      name: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelloReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sayHello(name, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     *
     * @param {HelloRequestFrom} helloRequestFrom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sayHelloFrom(
      helloRequestFrom: HelloRequestFrom,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HelloReply>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sayHelloFrom(helloRequestFrom, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    }
  };
};

/**
 * GreeterApi - factory interface
 * @export
 */
export const GreeterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = GreeterApiFp(configuration);
  return {
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHello(name: string, options?: any): AxiosPromise<HelloReply> {
      return localVarFp.sayHello(name, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {HelloRequestFrom} helloRequestFrom
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sayHelloFrom(helloRequestFrom: HelloRequestFrom, options?: any): AxiosPromise<HelloReply> {
      return localVarFp.sayHelloFrom(helloRequestFrom, options).then((request) => request(axios, basePath));
    }
  };
};

/**
 * GreeterApi - object-oriented interface
 * @export
 * @class GreeterApi
 * @extends {BaseAPI}
 */
export class GreeterApi extends BaseAPI {
  /**
   *
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GreeterApi
   */
  public sayHello(name: string, options?: AxiosRequestConfig) {
    return GreeterApiFp(this.configuration)
      .sayHello(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {HelloRequestFrom} helloRequestFrom
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GreeterApi
   */
  public sayHelloFrom(helloRequestFrom: HelloRequestFrom, options?: AxiosRequestConfig) {
    return GreeterApiFp(this.configuration)
      .sayHelloFrom(helloRequestFrom, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
