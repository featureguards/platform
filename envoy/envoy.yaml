static_resources:
  listeners:
    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                access_log:
                  - name: envoy.access_loggers.stdout
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                route_config:
                  name: http_route
                  virtual_hosts:
                    - name: app
                      domains:
                        - '*'
                      routes:
                        - match:
                            prefix: '/'
                          redirect:
                            https_redirect: true
                http_filters:
                  - name: envoy.filters.http.router

    - address:
        socket_address:
          address: 0.0.0.0
          port_value: 8443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                # access_log:
                #   - name: envoy.access_loggers.stdout
                #     typed_config:
                #       '@type': type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
                # Websocket is for next HMR.
                upgrade_configs:
                  - upgrade_type: websocket
                route_config:
                  name: https_route
                  virtual_hosts:
                    - name: app
                      domains:
                        - '*'
                      routes:
                        # NOTE: by default, matching happens based on the gRPC route, and not on the incoming request path.
                        # Reference: https://envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_json_transcoder_filter#route-configs-for-transcoded-requests
                        - match: { prefix: '/greeter.Greeter' }
                          route: { cluster: grpc, timeout: 60s }
                        - match: { prefix: '/global.Global' }
                          route: { cluster: grpc_global, timeout: 60s }
                        - match:
                            prefix: '/auth/'
                          route:
                            prefix_rewrite: '/'
                            cluster: kratos-ui
                        - match:
                            prefix: '/auth'
                          redirect:
                            path_redirect: '/auth/'
                        - match:
                            prefix: '/identity/'
                          route:
                            prefix_rewrite: '/'
                            cluster: kratos
                        - match:
                            prefix: '/'
                          route:
                            cluster: app
                http_filters:
                  - name: envoy.grpc_json_transcoder
                    typed_config:
                      '@type': type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                      proto_descriptor: '/protos/proto.pb'
                      services:
                        - greeter.Greeter
                        - global.Global
                      # convert_grpc_status: true
                      print_options:
                        add_whitespace: true
                        always_print_primitive_fields: true
                        always_print_enums_as_ints: false
                        preserve_proto_field_names: false
                  - name: envoy.filters.http.router

          transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificates:
                  # The following self-signed certificate pair is generated using:
                  # $ openssl req -x509 -newkey rsa:2048 -keyout a/front-proxy-key.pem -out  a/front-proxy-crt.pem -days 3650 -nodes -subj '/CN=front-envoy'
                  #
                  # Instead of feeding it as an inline_string, certificate pair can also be fed to Envoy
                  # via filename. Reference: https://envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/base.proto#config-core-v3-datasource.
                  #
                  # Or in a dynamic configuration scenario, certificate pair can be fetched remotely via
                  # Secret Discovery Service (SDS). Reference: https://envoyproxy.io/docs/envoy/latest/configuration/security/secret.
                  certificate_chain:
                    filename: /certs/cert.pem
                  private_key:
                    filename: /certs/cert-key.pem
  clusters:
    - name: app
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: app
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: app
                      port_value: 3000
    - name: kratos-ui
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: kratos-ui
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: kratos-ui
                      port_value: 4455
    - name: kratos
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: kratos
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: kratos
                      port_value: 4433

    - name: grpc
      connect_timeout: 1.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      dns_lookup_family: V4_ONLY
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: grpc
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: grpc
                      port_value: 50051

    - name: grpc_global
      connect_timeout: 1.25s
      type: LOGICAL_DNS
      lb_policy: ROUND_ROBIN
      dns_lookup_family: V4_ONLY
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      load_assignment:
        cluster_name: grpc_global
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: grpc_global
                      port_value: 50051

admin:
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 8001
layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              example_listener_name:
                connection_limit: 10000
